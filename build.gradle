apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish' // for bintray
apply plugin: 'signing' // for oss
apply plugin: 'codenarc'
apply plugin: 'bintray'


/**** Uncomment this to get faster build times ****/

//build.dependsOn.remove("check")

/**************************************************/

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
    }
}

repositories {
    jcenter()
    mavenCentral()
}

group = 'com.tkruse.gradle'
version = '0.4.0'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

def compatibilityVersion = 1.7
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

// ********* Testing & Checks

codenarcMain.maxPriority2Violations = 3
codenarcTest.maxPriority2Violations = 1

tasks.withType(CodeNarc) { codeNarcTask ->
    codeNarcTask.ignoreFailures = true
}


test {
    testLogging {
        exceptionFormat = "full" // default is "short"
    }
}

dependencies {
    compile gradleApi()
    compile "jline:jline:1.0"
    compile('org.codehaus.groovy:groovy-all:2.2.2') { force = true }
    runtime('commons-cli:commons-cli:1.2')
    testCompile("junit:junit-dep:4.11")
}

// ********* Not to myself: Release steps
// run clean check locally
// push to master
// wait for travis to be happy
// bump version
// push to master
// assemble, uploadArchives, bintrayUpload


// ********* Maven Central
// https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide
// http://central.sonatype.org/pages/releasing-the-deployment.html
// http://yennicktrevels.com/blog/2013/10/11/automated-gradle-project-deployment-to-sonatype-oss-repository/

task sourcesJar( type: Jar ) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar( type: Jar ) {
    classifier 'javadoc'
    from groovydoc
}

task javadocJar (type: Jar, dependsOn: javadoc) { // (1)
    classifier = 'javadoc'
    from javadoc.destinationDir
}


artifacts {
    archives sourcesJar
    archives groovydocJar
    archives javadocJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

/*
 * run with gradle uploadArchives.
 * then go to
 * https://oss.sonatype.org/#stagingRepositories
 * check all is good. If not, find the repo, select, close, wait until closed, then release
 */
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(
                    userName: (project.hasProperty( 'sonatypeUsername' ) ? project.getProperty( 'sonatypeUsername' ) : null),
                    password: (project.hasProperty( 'sonatypePassword' ) ? project.getProperty( 'sonatypePassword' ) : null))
            }
            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url 'https://github.com/tkruse/gradle-groovysh-plugin'
                scm {
                    url 'https://github.com/tkruse/gradle-groovysh-plugin'
                    connection 'scm:git:git://tkruse/gradle-groovysh-plugin.git'
                    developerConnection 'scm:git:ssh:git@github.com:tkruse/gradle-groovysh-plugin.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/license/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'tkruse'
                        name 'Thibault Kruse'
                        email project.hasProperty( 'email' ) ? project.getProperty( 'email' ) : null
                    }
                }
            }
        }
    }
}

// ********* Bintray
// https://github.com/bintray/gradle-bintray-plugin

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Groovysh plugin',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact groovydocJar
        }
    }
}

/*
 * Run with gradle bintrayUpload
 * then go to https://bintray.com/tkruse/maven/gradle-groovysh-plugin and hit publish
 */
bintray {
    user = project.hasProperty( 'bintrayUser' ) ? project.getProperty( 'bintrayUser' ) : null
    key = project.hasProperty( 'bintrayKey' ) ? project.getProperty( 'bintrayKey' ) : null
    publications = ['mavenJava']

    pkg {
        repo = 'maven'
        name = 'gradle-groovysh-plugin'
        desc = 'A gradle plugin to start command-line shells with your Application classes.'
        licenses = ['Apache-2.0']
        labels = ['groovysh', 'groovy', 'shell']
    }

    // dryRun = true
}
